%% Input (as built with Hazard L'Aquila)

options.General.timeHorizon = 50;
options.General.intRate = 0.02;

options.Vulnerability.fragMedians = [0.165879930589601,0.322526111223683,0.340170312466871,0.460814512917018];
options.Vulnerability.fragDispersions = [0.436863904039988,0.442107162939676,0.442742956715563,0.447169859279770];
options.Vulnerability.damgeLossRatios = [0 2 10 43.5 95]/100;
options.Vulnerability.CoVdlr = [ 0 1 0.4 0.3 0.05 ];

options.Hazard.faultRate = 0.08;
options.Hazard.hazCurve = [0.166427989012818,0.0332146240000000;0.217582434028613,0.0198850450000000;0.258529430931683,0.0138629440000000;0.303930770035728,0.00988592600000000;0.354443451456181,0.00713349900000000;0.412206673094016,0.00496922700000000;0.565248464301760,0.00210721000000000;0.695119133694674,0.00102586600000000;0.846507595616605,0.000404054000000000];


%% Sensitivity

Nsteps = [10, 100, 200, 500, 1000, 2000, 10000];

for s = numel(Nsteps) : -1 : 1
    sensStep = distNPVaggregateLosses(options);
    
    sensStep = sensStep.getPDFinterarrivalTime;
    sensStep = sensStep.getPMFnumberEvents;
    sensStep = sensStep.getPDFarrivalTime;
    sensStep = sensStep.getCDFloss;
    sensStep = sensStep.getPDFlossNPV;
    sensStep = sensStep.getPDFaggregateLossNPV;
    
    PDsensStep.PDFaggLossNPV(:,1), sensStep.PDFaggLossNPV(:,2)
end

figure; hold on
plot(sensStep.PDFaggLossNPV(:,1), sensStep.PDFaggLossNPV(:,2), ...
     'LineWidth', 2)
 
axis([0 11 0 sensStep.PDFaggLossNPV(20,2)])
xlabel('NPV(AL)')
ylabel('p(NPV(AL))')
set(gca, 'FontSize', 18)

%% Test PDF areas

toll = 0.01;

% interarrival
totA = trapz(sensStep.PDFinterarrivalTime(:,1), sensStep.PDFinterarrivalTime(:,2));
assert(abs(totA-1)<toll, 'area under the \Delta \tau PDF is not one')

% N events
assert(abs(sum(sensStep.PMFnumberEvents(:,2))-1)<toll, ...
    'Area of N_{ev} PMF is not one')

% arrival
for n = sensStep.NmaxEvents : -1 : 1
    totArea(n) = trapz(sensStep.PDFarrivalTime(:,1), sensStep.PDFarrivalTime(:,n+1));
end
assert(any(abs(totArea-1)<toll), 'area under the \tau PDFs is not one')

% loss|DS
clear derivative
for ds = 5 : -1 : 2
    derivative = sensStep.numericalDerivative(...
        [sensStep.LOSSdef, sensStep.CDFlossGivenDS(:,ds)]);
    
    dsArea(ds-1) = trapz(derivative(:,1),derivative(:,2));
end

assert(any(abs(dsArea-1)<toll), 'area under the Loss|DS PDFs is not one')

% IM
pdfIM(:,1) = sensStep.MAFim(:,1);
pdfIM(:,2) = sensStep.MAFim(:,2)/sensStep.parameters.Hazard.faultRate;
imArea = trapz(pdfIM(:,1),pdfIM(:,2));
%assert(abs(imArea-1)<0.01, 'area under the PDF(IM) is not one')

% loss|one event
lossArea = trapz(sensStep.PDFlossGivenOneEvent(:,1), sensStep.PDFlossGivenOneEvent(:,2));
assert(abs(lossArea-1)<toll, 'area under the loss|1ev PDF is not one')

% NPV1
for n = sensStep.NmaxEvents : -1 : 1
    areaNPV1(n) = trapz(sensStep.PDFunitCashFlowNPV(:,1), ...
        sensStep.PDFunitCashFlowNPV(:,n+1));
end
assert(any(abs(areaNPV1-1)<toll), 'area under the NPV1 PDFs is not one')

% NPVL
for n = sensStep.NmaxEvents : -1 : 1
    areaNPVL(n) = trapz(sensStep.PDFlossNPV(:,1), sensStep.PDFlossNPV(:,n+1));
end
assert(any(abs(areaNPVL-1)<toll), 'area under the NPVL PDFs is not one')

% NPV(AL)|Nevents
for n = sensStep.NmaxEvents : -1 : 1
    areaNPVaggN(n) = trapz(sensStep.PDFaggLossNPVGivenNevents(:,1), ...
        sensStep.PDFaggLossNPVGivenNevents(:,n+1));
end
assert(any(abs(areaNPVaggN-1)<toll), 'area under the NPV(AL)|Nevents PDFs is not one')

% NPV(AL)
npvalArea = trapz(sensStep.PDFaggLossNPV(:,1), sensStep.PDFaggLossNPV(:,2));
assert(abs(npvalArea-1)<toll, 'area under the NPV(AL) PDF is not one')

%% 

colEvents = gray(sensStep.NmaxEvents+1);
